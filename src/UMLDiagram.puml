@startuml


class core.Clock {
- Timer timer
- LocalDateTime date
- {static} Clock clock
--
- Clock()
+ getDate()
+ start()
+ cancel()
+ getInstance()
}

class core.Activity{
- List<String> tags
- String name;
- Duration duration;
- Activity father;
- LocalDateTime initialDate
- LocalDateTime finalDate
--
+ Activity(String name)
+ Activity(String name, LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ addFather(Activity a)
+ getFather()
+ addTag(String tag)
+ getTags()
+ removeTag(String tag)
+ LocalDateTime getInitialDate()
+ LocalDateTime getFinalDate()
+ setInitialDate(LocalDateTime initialDate)
+ {abstract} acceptVisitor(Visitor v)
}

class core.Interval{
- Duration duration;
- Task father;
- LocalDateTime initialDate;
- LocalDateTime finalDate;
--
+ Interval(Task father)
+ Interval(LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ update(Observable o, Object ob)
+ LocalDateTime getInitialDate()
+ LocalDateTime getFinalDate()
+ Duration getDuration()
+ String toString()
+ Object acceptVisitor(visitor.visitor v)
+ setFather(Task t)
}

class core.Task{
- {static} List<Interval> intervals
- {static} boolean status
--
+ Task(String name)
+ Task(String name, LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ getStatus()
+ setStatus(boolean status)
+ startTask()
+ stopTask()
+ List<Interval> getIntervals()
+ Activity find(String name)
+ Object acceptVisitor(Visitor v)
}

class core.Project{
- {static} List<Activity> childs
--
+ Project(String name)
+ Project(String name, LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ JSONObject acceptVisitor(visitor.visitor v)
+ addActivity(Activity a)
+ removeActivity(Activity a)
+ List<Activity> getChilds()
+ Activity find(String name)
+ Object acceptVisitor(Visitor v)
}


class core.Client{
--
+ update(Observable o, Object arg)
+ wait(int seconds)
+ start()
+ main(String[] args)
}


class core.JSONParse{
--
+ saveFile(Activity activity, String fileName)
+ loadFile(String fileName)
+ createTask(JSONObject ob)
+ createProject(JSONObject ob)
+ createInterval(JSONObject ob)
}

class core.PrintVisitor {
--
+ Object visitTask(Task task)
+ Object visitProject(Project project)
+ Object visitInterval(Interval interval)
}

class core.JsonVisitor {
--
+ JSONObject visitTask(Task task)
+ JSONObject visitProject(Project project)
+ JSONObject visitInterval(Interval interval)
}

interface visitor.Visitor {
--
+ Object visitTask(Task task)
+ Object visitProject(Project project)
+ Object visitInterval(Interval interval)
}

class secondmilestone.TimeVisitor {
--
- LocalDateTime initialDate
- LocalDateTime finalDate
+ Object visitTask(Task task)
+ Object visitProject(Project project)
+ Object visitInterval(Interval interval)
}

class secondmilestone.VisitorTags {
--
- String tag
- List<Activity> activitiesWithTag
+ Object visitTask(Task task)
+ Object visitProject(Project project)
+ Object visitInterval(Interval interval)
}


core.Activity <--> core.Client
core.Activity --> core.Activity
core.Activity <--o core.Project
core.Activity <|-- core.Project
core.Activity <|-- core.Task
core.Task o--> core.Interval
core.Interval ..> Observer
Observer <.. core.Client
core.Client <--> core.JSONParse
core.Clock --> Observable
core.JSONParse --> core.JsonVisitor
core.Activity --> visitor.Visitor
core.Interval --> visitor.Visitor
core.JsonVisitor ..|> visitor.Visitor
core.PrintVisitor ..|> visitor.Visitor
secondmilestone.TimeVisitor ..|> visitor.Visitor
secondmilestone.VisitorTags ..|> visitor.Visitor
core.Client --> visitor.Visitor
@enduml