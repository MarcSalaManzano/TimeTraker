@startuml

abstract class Controller
abstract class Clock
abstract class Observable
abstract class Activity
abstract class Interval
abstract class Observer
abstract class Task
abstract class Project
abstract class JSONSave
abstract class Client


Controller o--> Activity
Controller <--> Client
Activity --> Activity
Activity <--o Project
Activity <|-- Project
Activity <|-- Task
Task o--> Interval
Interval ..> Observer
Observer <.. Client
Client <--> JSONSave
Clock --> Observable

class Controller {
- {static} Activity root
- {static} List<Activity> activeTask
--
+ addTask(String name, String projectName)
+ addProject(String name, String projectName)
+ stopTask(String name)
+ startTask(String name)
- findActivityByName(String Name)
+ getActiveTask()
}

class Clock {
- {static} Timer timer
- {static} LocalDateTime date
- {static} Clock clock
--
- Clock()
+ getDate()
+ start()
+ cancel()
+ getInstance()
}

class Activity{
- {static} String[] tags
- {static} String name;
- {static} Duration duration;
- {static} father;
- {static} LocalDateTime initialDate
- {static} LocalDateTime finalDate
--
+ Activity(String name)
+ Activity(String name, LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ addFather(Activity a)
+ getFather()
+ LocalDateTime getInitialDate()
+ LocalDateTime getFinalDate()
+ setInitialDate(LocalDateTime initialDate)
}

class Interval{
- {static} Duration duration;
- {static} Task father;
- {static} LocalDateTime initialDate;
- static} LocalDateTime finalDate;
--
+ Interval(Task father)
+ Interval(LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ update(Observable o, Object ob)
+ LocalDateTime getInitialDate()
+ LocalDateTime getFinalDate()
+ Duration getDuration()
+ String toString()
+ JSONObject acceptVisitor(Visitor v)
+ setFather(Task t)
}

class Task{
- {static} List<Interval> intervals
- {static} boolean status
--
+ Task(String name)
+ Task(String name, LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ getStatus()
+ setStatus(boolean status)
+ startTask()
+ stopTask()
+ List<Interval> getIntervals()
}

class Project{
- {static} List<Activity> childs
--
+ Project(String name)
+ Project(String name, LocalDateTime initialDate, LocalDateTime finalDate, Duration duration)
+ JSONObject acceptVisitor(Visitor v)
+ addActivity(Activity a)
+ removeActivity(Activity a)
+ List<Activity> getChilds()
+ Activity find(String name)
}


class Client{
--
+ update(Observable o, Object arg)
+ wait(int seconds)
+ start()
+ main(String[] args)
}


class JSONSave{
--
+ saveFile(Activity activity, String fileName)
+ loadFile(String fileName)
+ createTask(JSONObject ob)
+ createProject(JSONObject ob)
+ createInterval(JSONObject ob)
}


@enduml